syntax = "proto2";

option java_package = "wyvern.stdlib.support.verifier";

package Ast;

// ---------------------------------------------------------------------------------------------------------------------------
// program

message Program {
  repeated Class     classes    = 1;
  required Statement statement  = 2;
}

// ---------------------------------------------------------------------------------------------------------------------------
// class

message Class {
  required string id    = 1;
  required string super = 2;

  message Field {
    required Type   type = 1;
    required string id   = 2;
  }
  repeated Field      fields     = 3;
  repeated Predicate  predicates = 4;
  repeated Method     methods    = 5;
}

// ---------------------------------------------------------------------------------------------------------------------------
// argument

message Argument {
  required Type   type = 1;
  required string id   = 2;
}

// ---------------------------------------------------------------------------------------------------------------------------
// predicate

message Predicate {
  required string   id        = 1;
  repeated Argument arguments = 3;
  required Formula  formula   = 4;
}

// ---------------------------------------------------------------------------------------------------------------------------
// type

message Type {
  message Int  { }
  message Bool { }
  message Top  { }
  oneof variant {
    Int    int   = 1;
    Bool   bool  = 2;
    string class = 3;
    Top    top   = 4;
  }
}

// ---------------------------------------------------------------------------------------------------------------------------
// method

message Method {
  required Type   type = 1;
  required string id   = 2;

  repeated Argument arguments = 3;

  required Contract dynamic = 4;
  required Contract static  = 5;

  required Statement body = 6;
}

// ---------------------------------------------------------------------------------------------------------------------------
// contract

message Contract {
  required Formula requires = 1;
  required Formula ensures  = 2;
}

// ---------------------------------------------------------------------------------------------------------------------------
// statement

message Statement {
  message Skip { }
  message Sequence {
    repeated Statement statements = 1;
  }
  message Declaration {
    required Type   type = 1;
    required string id   = 2;
  }
  message Assignment {
    required string     id    = 1;
    required Expression value = 2;
  }
  message IfThenElse {
    required Expression condition = 1;
    required Statement  then      = 2;
    required Statement  else      = 3;
  }
  message WhileLoop {
    required Expression condition = 1;
    required Formula    invariant = 2;
    required Statement  body      = 3;
  }
  message FieldAssignment {
    required string base   = 1;
    required string field  = 2;
    required string source = 3;
  }
  message NewObject {
    required string id    = 1;
    required string class = 2;
  }
  message MethodCall {
    required string target    = 1;
    required string base      = 2;
    required string method    = 3;
    repeated string arguments = 5;
    optional string class     = 6;
  }
  message Assertion {
    required Formula formula = 1;
  }
  message Release {
    required Formula formula = 1;
  }
  message Hold {
    required Formula   formula = 1;
    required Statement body    = 2;
  }
  message Fold {
    required string     predicate = 1;
    repeated Expression arguments = 2;
  }
  message Unfold {
    required string     predicate = 1;
    repeated Expression arguments = 2;
  }
  oneof variant {
    Skip              skip               = 1;
    Sequence          sequence           = 2;
    Declaration       declaration        = 3;
    Assignment        assignment         = 4;
    IfThenElse        if_then_else       = 5;
    WhileLoop         while_loop         = 6;
    FieldAssignment   field_assignment   = 7;
    NewObject         new_object         = 8;
    MethodCall        method_call        = 9;
    Assertion         assertion          = 10;
    Release           release            = 11;
    Hold              hold               = 12;
    Fold              fold               = 13;
    Unfold            unfold             = 14;
  }
}

// ---------------------------------------------------------------------------------------------------------------------------
// expression

message Expression {
  enum Operator {
    ADD = 1;
    SUB = 2;
    MUL = 3;
    DIV = 4;
    AND = 5;
    OR  = 6;
  }
  enum Comparer {
    NEQ = 1;
    EQ  = 2;
    LT  = 3;
    GT  = 4;
    LE  = 5;
    GE  = 6;
  }
  message BinaryOperation {
    required Operator   operator = 1;
    required Expression left     = 2;
    required Expression right    = 3;
  }
  message BinaryComparison {
    required Comparer   comparer = 1;
    required Expression left     = 2;
    required Expression right    = 3;
  }
  message FieldReference {
    required Expression base  = 1;
    required string     field = 2;
  }
  oneof variant {
    Variable         variable          = 1;
    Value            value             = 2;
    BinaryOperation  binary_operation  = 3;
    BinaryComparison binary_comparison = 4;
    FieldReference   field_reference   = 5;
  }
}

// ---------------------------------------------------------------------------------------------------------------------------
// variable

message Variable {
  message Result { }
  message This { }
  oneof variant {
    Result result = 1;
    string id     = 2;
    string old    = 3;
    This   this   = 4;
  }
}

// ---------------------------------------------------------------------------------------------------------------------------
// value

message Value {
  message Null  { }
  oneof variant {
    int32  int    = 1;
    bool   bool   = 2;
    string object = 3;
    Null   null   = 4;
  }
}

// ---------------------------------------------------------------------------------------------------------------------------
// binary formula operator

// ---------------------------------------------------------------------------------------------------------------------------
// formula

message Formula {
  // imprecise formula
  message Imprecise {
    required Concrete concrete = 1;
  }

  // concrete formula
  message Concrete {
    enum Operator {
      AND = 1;
      SEP = 2;
    }
    message PredicateCheck {
      required string     predicate = 1;
      repeated Expression arguments = 2;
      optional string     class     = 3;
    }
    message AccessCheck {
      required Expression base  = 1;
      required string     field = 2;
    }
    message Operation {
      required Operator operator = 1;
      required Concrete left     = 2;
      required Concrete right    = 3;
    }
    message IfThenElse {
      required Expression condition = 1;
      required Concrete   then      = 2;
      required Concrete   else      = 3;
    }
    message UnfoldingIn {
      required string     predicate = 1;
      repeated Expression arguments = 2;
      required Concrete   formula   = 3;
    }
    oneof variant {
      Expression     expression      = 1;
      PredicateCheck predicate_check = 2;
      AccessCheck    access_check    = 3;
      Operation      operation       = 4;
      IfThenElse     if_then_else    = 5;
      UnfoldingIn    unfolding_in    = 6;
    }
  }
  oneof variant {
    Concrete  concrete  = 1;
    Imprecise imprecise = 2;
  }
}
