@article{nanevskiAl:jfp2008,
    author = {Aleksandar Nanevski and Greg Morrisset and Lars Birkedal},
    title = "Hoare Type Theory, Polymorphism and Separation",
    journal = "Journal of Functional Programming",
    issue = 18,
    volume = {5-6},
    pages  = {865--911},
    year = 2008,
    publisher = {Cambridge University Press},
}

@inproceedings{bakstJhala:vmcai2016,
  author = {Alexander Bakst and Ranjit Jhala},
  title = {Predicate Abstraction for Linked Data Structures},
  booktitle = {Proceedings of the 17th International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI 2016)},
  pages = {65--84},
  year = 2016,
  month = jan,
  address = {St. Petersburg, FL, USA},
}

@inproceedings{lehmannTanter:popl2017,
  author =  {Nico Lehmann and {\'E}ric Tanter},
  title = {Gradual Refinement Types},
  crossref = {popl2017},
  pages = {775--788},
}

@inproceedings{Sergey:2012:GOT:2259248.2259277,
 author = {Sergey, Ilya and Clarke, Dave},
 title = {Gradual Ownership Types},
 booktitle = {Proceedings of the 21st European Conference on Programming Languages and Systems},
 series = {ESOP'12},
 year = {2012},
 isbn = {978-3-642-28868-5},
 location = {Tallinn, Estonia},
 pages = {579--599},
 numpages = {21},
 url = {http://dx.doi.org/10.1007/978-3-642-28869-2_29},
 doi = {10.1007/978-3-642-28869-2_29},
 acmid = {2259277},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
} 

@proceedings{popl2017,
  key = {POPL 2017},
  booktitle = {Proceedings of the 44th {ACM SIGPLAN-SIGACT} Symposium on Principles of Programming Languages (POPL 2017)},
  title = {Proceedings of the 44th {ACM SIGPLAN-SIGACT} Symposium on Principles of Programming Languages (POPL 2017)},
  year = 2017,
  address = {Paris, France},
  month = jan,
  publisher = acm,
}

@inproceedings{findlerFelleisen:icfp2002,
 author = {Findler, Robert Bruce and Matthias Felleisen},
  title = {Contracts for Higher-Order Functions},
  crossref = {icfp2002},
  pages = {48--59},
}
@proceedings{icfp2002,
  key = {ICFP 2002},
  booktitle = {Proceedings of the 7th ACM SIGPLAN Conference on Functional Programming (ICFP 2002)},
  title = {Proceedings of the 7th ACM SIGPLAN Conference on Functional Programming (ICFP 2002)},
  year = 2002,
  address = {Pittsburgh, PA, USA},
  month = sep,
  publisher = acm,
}


@Article{Burdy2005,
author="Burdy, Lilian
and Cheon, Yoonsik
and Cok, David R.
and Ernst, Michael D.
and Kiniry, Joseph R.
and Leavens, Gary T.
and Leino, K. Rustan M.
and Poll, Erik",
title="An overview of JML tools and applications",
journal="International Journal on Software Tools for Technology Transfer",
year="2005",
volume="7",
number="3",
pages="212--232",
abstract="The Java Modeling Language (JML) can be used to specify the detailed design of Java classes and interfaces by adding annotations to Java source files. The aim of JML is to provide a specification language that is easy to use for Java programmers and that is supported by a wide range of tools for specification typechecking, runtime debugging, static analysis, and verification.",
issn="1433-2787",
doi="10.1007/s10009-004-0167-4",
url="http://dx.doi.org/10.1007/s10009-004-0167-4"
}

@inproceedings{cousot:popl1977,
    author = {Cousot, Patrick and Cousot, Radhia},
    title = {Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints},
    crossref = {popl77},
    pages = {238--252},
}

@proceedings{popl77,
  key = {POPL 1977},
  booktitle = {Conference Record of the 4th {ACM} Symposium on Principles of Programming Languages (POPL 77)}, 
 title = {Conference Record of the 4th {ACM} Symposium on Principles of Programming Languages (POPL 77)}, 
  year = 1977,
  month = jan,
  address = {Los Angeles, CA, USA},
  publisher = acm,
}

@misc{olydisGitHub,
    author = {Bader, Johannes},
    title = {{GradVer, GitHub repository}},
    year = {2016},
    publisher = {GitHub},
    howpublished = {\url{https://github.com/olydis/GradVer}},
    commit = {050c500933a3cda63366ab6dea913c8d3d794c17}
}

% IDF, Chalice, ...
@inproceedings{smans2009implicit,
    title={Implicit dynamic frames: Combining dynamic frames and separation logic},
    author={Smans, Jan and Jacobs, Bart and Piessens, Frank},
    booktitle={European Conference on Object-Oriented Programming},
    pages={148--172},
    year={2009},
    organization={Springer}
}

@inproceedings{reynolds2002separation,
    title={Separation logic: A logic for shared mutable data structures},
    author={Reynolds, John C},
    booktitle={Logic in Computer Science, 2002. Proceedings. 17th Annual IEEE Symposium on},
    pages={55--74},
    year={2002},
    organization={IEEE}
}

@inproceedings{parkinson2011relationship,
    title={The relationship between separation logic and implicit dynamic frames},
    author={Parkinson, Matthew J and Summers, Alexander J},
    booktitle={European Symposium on Programming},
    pages={439--458},
    year={2011},
    organization={Springer}
}

@incollection{leino2009verification,
    title={Verification of concurrent programs with Chalice},
    author={Leino, K Rustan M and M{\"u}ller, Peter and Smans, Jan},
    booktitle={Foundations of Security Analysis and Design V},
    pages={195--222},
    year={2009},
    publisher={Springer}
}

@inproceedings{summers2013formal,
    title={A formal semantics for isorecursive and equirecursive state abstractions},
    author={Summers, Alexander J and Drossopoulou, Sophia},
    booktitle={European Conference on Object-Oriented Programming},
    pages={129--153},
    year={2013},
    organization={Springer}
}

@inproceedings{MuellerSchwerhoffSummers16,
    author = {P. M{\"u}ller and M. Schwerhoff and A. J. Summers},
    title = {Viper: A Verification Infrastructure for Permission-Based Reasoning},
    booktitle = {Verification, Model Checking, and Abstract Interpretation (VMCAI)},
    editor = {B. Jobstmann and K. R. M. Leino},
    year = {2016},
    publisher = {Springer-Verlag},
    series = {LNCS},
    pages = {41-62},
    volume = {9583}
}


% AGT
@phdthesis{mine2004weakly,
    title={Weakly relational numerical abstract domains},
    author={Min{\'e}, Antoine},
    year={2004},
    school={Ecole Polytechnique X}
}

@article{bres2004compiling,
    title={Compiling scheme programs to .NET common intermediate language},
    author={Bres, Yannis and Serpette, Bernard Paul and Serrano, Manuel},
    journal={.NET Technologies 2004},
    pages={25},
    year={2004}
}

@inproceedings{meijer2004static,
    title={Static typing where possible, dynamic typing when needed: The end of the cold war between programming languages},
    author={Meijer, Erik and Drayton, Peter},
    year={2004},
    organization={Citeseer}
}

@article{gray2005fine,
    title={Fine-grained interoperability through mirrors and contracts},
    author={Gray, Kathryn E and Findler, Robert Bruce and Flatt, Matthew},
    journal={ACM SIGPLAN Notices},
    volume={40},
    number={10},
    pages={231--245},
    year={2005},
    publisher={ACM}
}

@inproceedings{siek2006gradual,
    title={Gradual typing for functional languages},
    author={Siek, Jeremy G and Taha, Walid},
    booktitle={Scheme and Functional Programming Workshop},
    volume={6},
    pages={81--92},
    year={2006}
}
@inproceedings{siek2007gradual,
    title={Gradual typing for objects},
    author={Siek, Jeremy and Taha, Walid},
    booktitle={European Conference on Object-Oriented Programming},
    pages={2--27},
    year={2007},
    organization={Springer}
}

@inproceedings{siek2015refined,
    title={Refined criteria for gradual typing},
    author={Siek, Jeremy G and Vitousek, Michael M and Cimini, Matteo and Boyland, John Tang},
    booktitle={LIPIcs-Leibniz International Proceedings in Informatics},
    volume={32},
    year={2015},
    organization={Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik}
}

@inproceedings{garcia2016abstracting,
    author = {Garcia, Ronald and Clark, Alison M. and Tanter, \'{E}ric},
    title = {Abstracting Gradual Typing},
    booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
    series = {POPL '16},
    year = {2016},
    isbn = {978-1-4503-3549-2},
    location = {St. Petersburg, FL, USA},
    pages = {429--442},
    numpages = {14},
    url = {http://doi.acm.org/10.1145/2837614.2837670},
    doi = {10.1145/2837614.2837670},
    acmid = {2837670},
    publisher = {ACM},
    address = {New York, NY, USA},
    keywords = {abstract interpretation, gradual typing, subtyping},
} 

@article{garcia2015deriving,
    title={Deriving a Simple Gradual Security Language},
    author={Garcia, Ronald and Tanter, Eric},
    journal={arXiv preprint arXiv:1511.01399},
    year={2015}
}

@inproceedings{wolff2011gradual,
    title={Gradual typestate},
    author={Wolff, Roger and Garcia, Ronald and Tanter, {\'E}ric and Aldrich, Jonathan},
    booktitle={European Conference on Object-Oriented Programming},
    pages={459--483},
    year={2011},
    organization={Springer}
}

@inproceedings{banados2014theory,
    title={A theory of gradual effect systems},
    author={Ba{\~n}ados Schwerter, Felipe and Garcia, Ronald and Tanter, {\'E}ric},
    booktitle={ACM SIGPLAN Notices},
    volume={49},
    number={9},
    pages={283--295},
    year={2014},
    organization={ACM}
}

@inproceedings{toro2015customizable,
    title={Customizable gradual polymorphic effects for Scala},
    author={Toro, Mat{\'\i}as and Tanter, Eric},
    booktitle={ACM SIGPLAN Notices},
    volume={50},
    number={10},
    pages={935--953},
    year={2015},
    organization={ACM}
}

% practice
@inproceedings{arlt2014gradual,
    title={The gradual verifier},
    author={Arlt, Stephan and Rubio-Gonz{\'a}lez, Cindy and R{\"u}mmer, Philipp and Sch{\"a}f, Martin and Shankar, Natarajan},
    booktitle={NASA Formal Methods Symposium},
    pages={313--327},
    year={2014},
    organization={Springer}
}

@article{meyer1988eiffel,
    title={Eiffel: A language and environment for software engineering},
    author={Meyer, Bertrand},
    journal={Journal of Systems and Software},
    volume={8},
    number={3},
    pages={199--246},
    year={1988},
    publisher={Elsevier}
}

@book{meyerOOSC,
    title={Object-Oriented Software Construction},
    author={Meyer, Bertrand},
    year={1988},
    publisher={Prentice Hall}
}

@article{leino2000esc,
    title={ESC/Java user's manual},
    author={Leino, K Rustan M and Nelson, Greg and Saxe, James B},
    journal={ESC},
    volume={2000},
    pages={002},
    year={2000}
}

@inproceedings{nelson2004extended,
    title={Extended static checking for java},
    author={Nelson, Greg},
    booktitle={International Conference on Mathematics of Program Construction},
    pages={1--1},
    year={2004},
    organization={Springer}
}

@inproceedings{jacobs2001logic,
    title={A logic for the Java Modeling Language JML},
    author={Jacobs, Bart and Poll, Erik},
    booktitle={International Conference on Fundamental Approaches to Software Engineering},
    pages={284--299},
    year={2001},
    organization={Springer}
}

@article{cheon2002runtime,
    title={A runtime assertion checker for the Java Modeling Language (JML)},
    author={Cheon, Yoonsik and Leavens, Gary T},
    year={2002}
}

@inproceedings{sarcar2010new,
    title={A new Eclipse-based JML compiler built using AST merging},
    author={Sarcar, Amritam and Cheon, Yoonsik},
    booktitle={Software Engineering (WCSE), 2010 Second World Congress on},
    volume={2},
    pages={287--292},
    year={2010},
    organization={IEEE}
}

@inproceedings{the-spec-programming-system-an-overview,
    author = {Mike Barnett, Rustan Leino, Wolfram Schulte},
    title = {The Spec\# Programming System: An Overview},
    booktitle = {CASSIS 2004, Construction and Analysis of Safe, Secure and Interoperable Smart devices},
    year = {2005},
    month = {January},
    abstract = {The SpecSharp programming system is a new attempt at a more cost effective way to develop and maintain high-quality software. This paper describes the goals and architecture of the Spec# programming system, consisting of the object-oriented Spec# programming language, the Spec# compiler, and the Boogie static program verifier. The language includes constructs for writing specifications that capture programmer intentions about how methods and data are to be used, the compiler emits run-time checks to enforce these specifications, and the verifier can check the consistency between a program and its specifications.
    },
    publisher = {Springer},
    url = {https://www.microsoft.com/en-us/research/publication/the-spec-programming-system-an-overview/},
    address = {},
    pages = {49-69},
    journal = {},
    volume = {3362},
    chapter = {},
    isbn = {},
}

@inproceedings{a-statically-verifiable-programming-model-for-concurrent-object-oriented-programs,
    author = {Bart Jacobs, Jan Smans, Frank Piessens, Wolfram Schulte},
    title = {A Statically Verifiable Programming Model for Concurrent Object-Oriented Programs},
    booktitle = {ICFEM},
    year = {2006},
    month = {January},
    publisher = {Springer},
    url = {https://www.microsoft.com/en-us/research/publication/a-statically-verifiable-programming-model-for-concurrent-object-oriented-programs/},
    address = {},
    pages = {420-439},
    journal = {},
    volume = {4260},
    chapter = {},
    isbn = {3-540-47460-9},
}

@inproceedings{embedded-contract-languages,
    author = {Manuel Fahndrich, Mike Barnett, Francesco Logozzo},
    title = {Embedded Contract Languages},
    booktitle = {ACM SAC - OOPS},
    year = {2010},
    month = {March},
    abstract = {
    
    Specifying application interfaces (APIs) with information that goes beyond method argument and return types is a long-standing quest of programming language researchers and practitioners. The number of type system extensions or specification languages is roughly equal to the number of tools that consume them. In other words, every tool comes with its own specification language. In this paper we argue that for modern object-oriented languages, using an embedding of contracts as code is a better approach. We exemplify our embedding of Code Contracts on the Microsoft managed execution platform (.NET) using the C# programming language. The embedding works as well in Visual Basic. We discuss the numerous advantages of our approach and the technical challenges, as well as the status of tools that consume the embedded contracts
    
    
    },
    publisher = {Association for Computing Machinery, Inc.},
    url = {https://www.microsoft.com/en-us/research/publication/embedded-contract-languages/},
    address = {},
    pages = {},
    journal = {},
    volume = {},
    chapter = {},
    isbn = {},
}

@incollection{crocker2004safe,
    title={Safe object-oriented software: the verified design-by-contract paradigm},
    author={Crocker, David},
    booktitle={Practical Elements of Safety},
    pages={19--41},
    year={2004},
    publisher={Springer}
}


@inproceedings{ChristakisMuellerWuestholz16,
    author = {M. Christakis and P. M{\"u}ller and V. W{\"u}stholz},
    title = {Guiding Dynamic Symbolic Execution toward Unverified Program Executions},
    booktitle = {International Conference on Software Engineering (ICSE)},
    editor = {L. K. Dillon and W. Visser and L. Williams},
    year = {2016},
    pages = {144--155},
    publisher = {ACM}
}

@inproceedings{nguyen2008runtime,
    title={Runtime checking for separation logic},
    author={Nguyen, Huu Hai and Kuncak, Viktor and Chin, Wei-Ngan},
    booktitle={International Workshop on Verification, Model Checking, and Abstract Interpretation},
    pages={203--217},
    year={2008},
    organization={Springer}
}


% basics
@article{Wright:1994:SAT:191905.191909,
	author = {Wright, A.K. and Felleisen, M.},
	title = {A Syntactic Approach to Type Soundness},
	journal = {Inf. Comput.},
	issue_date = {Nov. 15, 1994},
	volume = {115},
	number = {1},
	month = nov,
	year = {1994},
	issn = {0890-5401},
	pages = {38--94},
	numpages = {57},
	url = {http://dx.doi.org/10.1006/inco.1994.1093},
	doi = {10.1006/inco.1994.1093},
	acmid = {191909},
	publisher = {Academic Press, Inc.},
	address = {Duluth, MN, USA},
} 

@article{Dijkstra:1975:GCN:360933.360975,
	author = {Dijkstra, Edsger W.},
	title = {Guarded Commands, Nondeterminacy and Formal Derivation of Programs},
	journal = {Commun. ACM},
	issue_date = {Aug. 1975},
	volume = {18},
	number = {8},
	month = aug,
	year = {1975},
	issn = {0001-0782},
	pages = {453--457},
	numpages = {5},
	url = {http://doi.acm.org/10.1145/360933.360975},
	doi = {10.1145/360933.360975},
	acmid = {360975},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {case-construction, correctness proof, derivation of programs, nondeterminancy, program semantics, programming language semantics, programming languages, programming methodology, repetition, sequencing primitives, termination},
} 

@article{hoare1969axiomatic,
    title={An axiomatic basis for computer programming},
    author={Hoare, Charles Antony Richard},
    journal={Communications of the ACM},
    volume={12},
    number={10},
    pages={576--580},
    year={1969},
    publisher={ACM}
}